using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using MathNet.Numerics;
using Models;
using Models.Core;
using Models.Interfaces;
using Newtonsoft.Json;
using static APSIM.Shared.Utilities.ProcessUtilities;

namespace Models.Climate
{
    /// <summary>
    /// A class which wraps the BestiaPop python tool to generate weather files on the fly
    /// for a given latitude/longitude/dates/etc.
    /// https://github.com/JJguri/bestiapop
    /// </summary>
    [PresenterName("UserInterface.Presenters.PropertyPresenter")]
    [ViewName("UserInterface.Views.GridView")]
    public class BestiaPop : Model, IWeather
    {
        /// <summary>
        /// Summary file, used for logging purposes.
        /// </summary>
        [Link] private ISummary summary;

        /// <summary>
        /// Url of bestiapop github repo.
        /// </summary>
        private const string url = "https://github.com/JJguri/bestiapop";

        /// <summary>
        /// Path to which bestiapop is installed. It will be installed to this location
        /// if it does not already exist.
        /// </summary>
        private static readonly string bestiapopPath = Path.Combine(
                                    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                                    "ApsimInitiative",
                                    "ApsimX",
                                    "Python",
                                    "bestiapop");

        /// <summary>
        /// The weather file which has been generated by bestiapop.
        /// This is provides the bulk of the IWeather implementation.
        /// </summary>
        private IWeather weather;

        /// <summary>
        /// Output path (directory name). Leave blank to delete files after use.
        /// </summary>
        [Description("Output path. Leave blank to delete files after use.")]
        [Display(Type = DisplayType.DirectoryName)]
        public string OutputPath { get; set; }

        /// <summary>
        /// Controls whether bestiapop is run in multi-process mode.
        /// </summary>
        [Description("Controls whether bestiapop is run in multi-process mode")]
        public bool MultiProcess { get; set; }

        /// <summary>
        /// Latitude.
        /// </summary>
        [Description("Latitude")]
        public double Latitude { get; set; }

        /// <summary>
        /// Longitude.
        /// </summary>
        [Description("Longitude")]
        public double Longitude { get; set; }

        /// <summary>
        /// Start date of the weather.
        /// </summary>
        [Description("Start date of the weather file")]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End date of the weather file.
        /// </summary>
        [Description("End date of the weather file")]
        public DateTime EndDate { get; set; }

        // IWeather implementation.

        /// <summary>
        /// Maximum temperature.
        /// </summary>
        [Units("°C")]
        [JsonIgnore]
        public double MaxT => weather.MaxT;

        /// <summary>
        /// Minimum temperature.
        /// </summary>
        [Units("°C")]
        [JsonIgnore]
        public double MinT => weather.MinT;

        /// <summary>
        /// Mean temperature.
        /// </summary>
        [Units("°C")]
        [JsonIgnore]
        public double MeanT => weather.MeanT;

        /// <summary>
        /// Mean VPD.
        /// </summary>
        [Units("hPa")]
        [JsonIgnore]
        public double VPD => weather.VPD;

        /// <summary>
        /// Rainfall.
        /// </summary>
        [Units("mm")]
        [JsonIgnore]
        public double Rain => weather.Rain;

        /// <summary>
        /// Solar radiation.
        /// </summary>
        [Units("MJ/m^2/d")]
        [JsonIgnore]
        public double Radn => weather.Radn;

        /// <summary>
        /// Vapor pressure.
        /// </summary>
        [Units("hPa")]
        [JsonIgnore]
        public double VP => weather.VP;

        /// <summary>
        /// Wind value found in weather file or 3 if not found.
        /// </summary>
        /// <remarks>See <see cref="Weather.Wind"/>.</remarks>
        [JsonIgnore]
        public double Wind => weather.Wind;

        /// <summary>
        /// CO2 level. Default value if not found is 350.
        /// </summary>
        [JsonIgnore]
        public double CO2 => weather.CO2;

        /// <summary>
        /// Atmospheric pressure.
        /// </summary>
        [Units("hPa")]
        [JsonIgnore]
        public double AirPressure => weather.AirPressure;

        /// <summary>
        /// Average temperature.
        /// </summary>
        [Units("°C")]
        [JsonIgnore]
        public double Tav => weather.Tav;

        /// <summary>
        /// Temperature amplitude.
        /// </summary>
        [JsonIgnore]
        public double Amp => weather.Amp;

        /// <summary>
        /// Tomorrow's met data.
        /// </summary>
        public DailyMetDataFromFile TomorrowsMetData => weather.TomorrowsMetData;

        /// <summary>
        /// Yesterday's met data.
        /// </summary>
        public DailyMetDataFromFile YesterdaysMetData => weather.YesterdaysMetData;

        /// <summary>
        /// Called at start of simulation. Generates the weather file for
        /// use during the simulation.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs args)
        {
            weather = GenerateWeatherFile();
        }

        /// <summary>
        /// Generate a weather file.
        /// </summary>
        /// <param name="cancelToken">Optional token which allows for cancellation of the child process.</param>
        public IWeather GenerateWeatherFile(CancellationToken cancelToken = default(CancellationToken))
        {
            if (!Directory.Exists(bestiapopPath))
                InstallBestiapop(bestiapopPath);

            string output = OutputPath;
            if (string.IsNullOrEmpty(output))
            {
                output = Path.Combine(Path.GetTempPath(), $"bestiapop-{Guid.NewGuid()}");
                if (summary != null)
                    summary.WriteMessage(this, $"OutputPath was not specified. Files will be generated to temp directory: '{output}'");
            }

            // todo: check if this is necessary.
            //if (!Directory.Exists(output))
            //    Directory.CreateDirectory(output);

            string bestiapop = Path.Combine(bestiapopPath, "bestiapop", "bestiapop.py");
            ProcessWithRedirectedOutput proc = new ProcessWithRedirectedOutput();
            StringBuilder args = new StringBuilder($"{bestiapop} -a download-and-convert-to-met -y {StartDate.Year}-{EndDate.Year} -lat {Latitude} -lon {Longitude} ");

            // todo: check that these are correct variables
            args.Append("-c daily_rain max_temp min_temp vp vp_deficit evap_pan radiation et_short_crop");
            if (MultiProcess)
                args.Append($"-m ");
            args.Append($"-o {output}");

            if (summary != null)
                summary.WriteMessage(this, $"Running bestiapop with command: 'python {args}' from directory {output}");
            proc.Start("python", args.ToString(), output, true, cancelToken);
            proc.WaitForExit();
            if (proc.ExitCode != 0)
            {
                StringBuilder error = new StringBuilder();
                error.AppendLine("Encountered an error while running bestiapop");
                error.AppendLine(proc.StdOut);
                error.AppendLine(proc.StdErr);
                throw new Exception(error.ToString());
            }

            Weather result = new Weather();
            result.FullFileName = Directory.GetFiles(output, "*.met").FirstOrDefault();
            return result;
        }

        /// <summary>
        /// Install bestiapop at the given path.
        /// </summary>
        /// <param name="installPath">Path to which bestiapop is installed.</param>
        /// <remarks>
        /// This assumes that git and pip are installed and on path.
        /// </remarks>
        private static void InstallBestiapop(string installPath)
        {
            try
            {
                CloneBestiapop(installPath);
                InstallDeps(installPath);
            }
            catch (Exception err)
            {
                try
                {
                    if (Directory.Exists(bestiapopPath))
                        Directory.Delete(bestiapopPath);
                }
                catch { /* Don't trap this error - we want to give the more informative error on what exactly went wrong. */ }

                throw new Exception("Unable to install bestiapop", err);
            }
        }

        /// <summary>
        /// Install required dependencies for bestiapop.
        /// </summary>
        /// <param name="path">Bestiapop install directory.</param>
        private static void InstallDeps(string path)
        {
            ProcessWithRedirectedOutput proc = new ProcessWithRedirectedOutput();
            proc.Start("pip", "install -r requirements.txt", path, true);
            proc.WaitForExit();
            if (proc.ExitCode != 0)
            {
                StringBuilder error = new StringBuilder();
                error.AppendLine("Unable to install bestiapop requirements");
                error.AppendLine(proc.StdOut);
                error.AppendLine(proc.StdErr);
                throw new Exception(error.ToString());
            }
        }

        /// <summary>
        /// Clone the bestiapop repo to a given directory.
        /// </summary>
        /// <param name="targetPath">The target directory. Bestiapop will be cloned into a subdirectory at this path.</param>
        private static void CloneBestiapop(string targetPath)
        {
            ProcessWithRedirectedOutput proc = new ProcessWithRedirectedOutput();
            proc.Start("git", $"clone {url} {targetPath}", targetPath, true);
            proc.WaitForExit();
            if (proc.ExitCode != 0)
            {
                StringBuilder error = new StringBuilder();
                error.AppendLine("Unable to clone bestiapop");
                error.AppendLine(proc.StdOut);
                error.AppendLine(proc.StdErr);
                throw new Exception(error.ToString());
            }
        }

        /// <summary>
        /// Gets the duration of the day in hours.
        /// </summary>
        /// <param name="Twilight">Angular distance between 90° and end of twilight - altitude of sun. +ve up, -ve down.</param>
        public double CalculateDayLength(double Twilight) => weather.CalculateDayLength(Twilight);

        /// <summary>
        /// Calculate time of sunrise in hours.
        /// </summary>
        public double CalculateSunRise() => weather.CalculateSunRise();

        /// <summary>
        /// Calculate time of sunset in hours.
        /// </summary>
        public double CalculateSunSet() => weather.CalculateSunSet();
    }
}
